# main.py
from collections import deque
from cross_section_read import CrossSectionReader
from vt_calc import VelocitySampler
from simulation import simulate_particle
from medium import Medium
from tally import Tally  # Import the Tally class
import random
import math


def main():
    # Initialize cross-section reader and sampler
    base_path = "./endfb"
    reader = CrossSectionReader(base_path)
    sampler = VelocitySampler(mass=3.44e-25, temperature=300)

    # Define mediums
    mediums = [
        Medium(name="Lead Shield", x_bounds=(2, 5), y_bounds=(-10, 10), z_bounds=(-10, 10), element="Pb208", priority=1),
        Medium(name="Void", x_bounds=(-10, 10), y_bounds=(-15, 15), z_bounds=(-15, 15), is_void=True, priority=0)
    ]

    # Atomic weight ratio for U235
    A = 2.5

    # Simulate particles
    num_particles = 100

    # Initialize Tally object
    tally = Tally()

    # Initialize particle queue
    particle_queue = deque([
        {
            "x": 1, "y": 0.0, "z": 0.0,
            "theta": random.uniform(0, math.pi),
            "phi": random.uniform(0, 2 * math.pi),
            "has_interacted": False,
            "energy": 10_000_000  # ev
        } for _ in range(num_particles)
    ])

    # For tracking if a particle existed within a certain region (x_min, x_max, y_min, y_max, z_min, z_max)
    region_bounds = (5, 10, -10, 10, -10, 10)

    # Simulation loop
    while particle_queue:
        state = particle_queue.popleft()  # Particle's state dictionary
        result, absorbed, fissioned, new_particles, final_energy, region_count = simulate_particle(
            state, reader, mediums, A, sampler, region_bounds
        )

        # Update tally with results from the particle simulation
        region_detected = region_count > 0
        tally.update(result, absorbed, fissioned, final_energy, region_detected)

        # Add any new particles generated by fission
        if new_particles:
            particle_queue.extend(new_particles)
    boundary_x = (-10, 10)
    boundary_y = (-5, 5)
    boundary_z = (-5, 5)
    '''
    absorbed_in_boundary = tally.count_coordinates_in_boundary(
        tally.absorbed_coordinates, boundary_x, boundary_y, boundary_z
    )
    fission_in_boundary = tally.count_coordinates_in_boundary(
        tally.fission_coordinates, boundary_x, boundary_y, boundary_z
    )

    print(f"  Absorbed coordinates within boundary {boundary_x, boundary_y, boundary_z}: {len(absorbed_in_boundary)}")
    print(f"  Fission coordinates within boundary {boundary_x, boundary_y, boundary_z}: {len(fission_in_boundary)}")
    '''
    # Output results
    tally.print_summary(num_particles)


if __name__ == "__main__":
    main()
