# main.py
from collections import deque
from cross_section_read import CrossSectionReader
from vt_calc import VelocitySampler
from simulation import simulate_particle
from medium import Medium
from geometry import count_coordinates_in_boundary
import random
import math


def main():
    # Initialize cross-section reader and sampler
    base_path = "./endfb"
    reader = CrossSectionReader(base_path)
    sampler = VelocitySampler(mass=3.44e-25, temperature=300)

    # Define mediums
    mediums = [
        Medium(name="Lead Shield", x_bounds=(2, 3), y_bounds=(-10, 10), z_bounds=(-10, 10), element="Pb208", priority=1),
        Medium(name="Void", x_bounds=(-10, 10), y_bounds=(-15, 15), z_bounds=(-15, 15), is_void=True, priority=0)
    ]


    # Atomic weight ratio for U235
    A = 2.5

    # Simulate particles
    # Simulate particles
    num_particles = 100
    results = {"absorbed": 0, "fission": 0, "escaped": 0}
    absorbed_coordinates = []
    fission_coordinates = []
    energy_spectrum = []

    # Initialize particle queue
    particle_queue = deque([
        {
        "x": 1, "y": 0.0, "z": 0.0,
        "theta": random.uniform(0, math.pi),
        "phi": random.uniform(0, 2 * math.pi),
        "has_interacted": False,
        "energy": 10_000_000 #ev
        } for _ in range(num_particles)
    ])

    #For tracking if a particle existed within a certain region (x_min, x_max, y_min, y_max, z_min, z_max)
    region_bounds = (3, 10, -10, 10, -10, 10)
    # Simulation loop
    while particle_queue:
        state = particle_queue.popleft()  # Particle's state dictionary
        result, absorbed, fissioned, new_particles, final_energy, region_count = simulate_particle(
            state, reader, mediums, A, sampler, region_bounds
        )

        # Update results
        results[result] += 1
        absorbed_coordinates.extend(absorbed)
        fission_coordinates.extend(fissioned)

        if final_energy is not None:
            energy_spectrum.append(final_energy)

        # Add any new particles generated by fission
        if new_particles:
            particle_queue.extend(new_particles)

    # Output results
    print(f"Simulation Results:")
    print(f"  Absorbed: {results['absorbed']}")
    print(f"  Fission: {results['fission']}")
    print(f"  Escaped: {results['escaped']}")
    print(f"  Detected within detection region (if specified): {region_count}")
    print(f"  Total particles simulated: {num_particles}")
    if energy_spectrum:
        print(f"  Average final energy: {sum(energy_spectrum) / len(energy_spectrum):.2f} eV")
    else:
        print(f"  No particles left to calculate average final energy.")
    print(f"  Absorbed coordinates: {absorbed_coordinates[:10]}...")  # First 10 for brevity
    print(f"  Fission coordinates: {fission_coordinates[:10]}...")  # First 10 for brevity


    # Specify boundary conditions
    boundary_x = (-10, 10)
    boundary_y = (-5, 5)
    boundary_z = (-5, 5)
    '''
    # Count coordinates within the specified boundary
    absorbed_in_boundary = count_coordinates_in_boundary(absorbed_coordinates, boundary_x, boundary_y, boundary_z)
    fission_in_boundary = count_coordinates_in_boundary(fission_coordinates, boundary_x, boundary_y, boundary_z)

    print(f"  Absorbed coordinates within boundary {boundary_x, boundary_y, boundary_z}: {absorbed_in_boundary}")
    print(f"  Fission coordinates within boundary {boundary_x, boundary_y, boundary_z}: {fission_in_boundary}")
    '''

if __name__ == main():
    main()
